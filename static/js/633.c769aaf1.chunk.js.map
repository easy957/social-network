{"version":3,"file":"static/js/633.c769aaf1.chunk.js","mappings":"kPA0DA,MAhDA,SAAmB,GAI2C,IAH5DA,EAAY,EAAZA,aACAC,EAAK,EAALA,MACAC,EAAO,EAAPA,QAEA,OACE,kBAAMC,SAAUH,EAAa,WAC3B,0BACE,SAACI,EAAA,EAAK,CACJC,SAAU,CAACC,EAAAA,GACXC,KAAK,QACLC,KAAK,QACLC,UAAWC,EAAAA,EACXC,YAAY,aAGhB,0BACE,SAACP,EAAA,EAAK,CACJC,SAAU,CAACC,EAAAA,GACXC,KAAK,WACLE,UAAWC,EAAAA,EACXF,KAAK,WACLG,YAAY,gBAGhB,4BACE,SAACP,EAAA,EAAK,CAACG,KAAK,aAAaE,UAAU,QAAQD,KAAK,cAChD,0BAAM,mBAEPP,IAAS,cAAGW,UAAWC,EAAAA,EAAAA,UAAY,SAAEZ,IACrCC,IACC,iCACE,gBAAKY,IAAKZ,EAASa,IAAI,aACvB,0BACE,SAACX,EAAA,EAAK,CACJC,SAAU,CAACC,EAAAA,GACXC,KAAK,UACLE,UAAWC,EAAAA,EACXC,YAAY,wBAKpB,4BAAQ,YAGd,EChDMK,GAAiBC,EAAAA,EAAAA,GAA+C,CACpEC,KAAM,SADeD,CAEpBE,GA+BH,IAKA,GAAeC,EAAAA,EAAAA,KALS,SAACC,GAAmB,MAAyB,CACnEC,OAAQD,EAAME,KAAKD,OACnBpB,QAASmB,EAAME,KAAKrB,QACrB,GAOkB,CAAEsB,MAAOC,EAAAA,IAL5B,EAzBA,SAAe,GAI+B,IAH5CD,EAAK,EAALA,MACAF,EAAM,EAANA,OACApB,EAAO,EAAPA,QAMA,OAAIoB,GACK,SAAC,KAAQ,CAACI,GAAG,cAGpB,iCACE,wBAAI,WACJ,SAACV,EAAc,CAACd,QAASA,EAASC,SAVtC,SAAkBwB,GAChBH,EAAMG,EACR,MAWF,G,4HC/BO,SAASjB,EAAY,GAKO,IAAD,IAJhCF,KAAAA,OAAI,MAAG,OAAM,MACboB,KAAQ3B,EAAK,EAALA,MAAO4B,EAAO,EAAPA,QACfC,EAAK,EAALA,MACGC,GAAS,YAENC,EAAWH,GAAW5B,EAI5B,OACE,iBAAKW,UAHC,GAAN,OAAUC,EAAAA,EAAAA,YAAa,YAAImB,EAAWnB,EAAAA,EAAAA,MAAU,IAGnB,UACjB,aAATL,IAAuB,uCAAcsB,GAAWC,IACvC,SAATvB,IAAmB,kCAAOA,KAAK,QAAWsB,GAAWC,IAC5C,UAATvB,IAAoB,kCAAOA,KAAK,SAAYsB,GAAWC,IAC9C,aAATvB,IACC,kCAAOA,KAAK,YAAesB,GAAWC,IAE9B,aAATvB,IACC,kCAAOA,KAAK,YAAesB,GAAWC,IAEvCC,IAAY,0BAAO/B,MAG1B,C,8EC9BO,IAAMK,EAA0B,SAAC2B,GAAK,OAC3CA,OAAQC,EAAY,gBAAiB,EAE1BC,EACX,SAACC,GAAW,OACZ,SAACH,GAAK,OACJA,GAASA,EAAMI,OAASD,EAAG,mCACKA,EAAG,iBAC/BF,CAAU,CAAD,C,qBCTjB,KAAgB,YAAc,iCAAiC,MAAQ,2BAA2B,UAAY,+B","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","components/common/FormControl/FormControl.tsx","components/utils/validate.ts","webpack://react-01/./src/components/common/FormControl/FormControl.module.css?004a"],"sourcesContent":["import { Field, InjectedFormProps } from \"redux-form\";\nimport { FormControl } from \"../common/FormControl/FormControl\";\nimport { required } from \"../utils/validate\";\nimport s from \"../common/FormControl/FormControl.module.css\";\nimport { AuthLoginProps } from \"../../redux/types\";\n\ntype PropsType = {\n  captcha: string;\n};\n\nfunction LoginForm({\n  handleSubmit,\n  error,\n  captcha,\n}: InjectedFormProps<AuthLoginProps, PropsType> & PropsType) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          validate={[required]}\n          name=\"email\"\n          type=\"email\"\n          component={FormControl}\n          placeholder=\"Email\"\n        />\n      </div>\n      <div>\n        <Field\n          validate={[required]}\n          name=\"password\"\n          component={FormControl}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </div>\n      <div>\n        <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\" />\n        <span>remember me</span>\n      </div>\n      {error && <p className={s.formError}>{error}</p>}\n      {captcha && (\n        <>\n          <img src={captcha} alt=\"Captcha\" />\n          <div>\n            <Field\n              validate={[required]}\n              name=\"captcha\"\n              component={FormControl}\n              placeholder=\"Enter sybmols\"\n            />\n          </div>\n        </>\n      )}\n      <button>Login</button>\n    </form>\n  );\n}\n\nexport default LoginForm;\n","import { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { reduxForm } from \"redux-form\";\nimport { loginThunk } from \"../../redux/authReducer\";\nimport LoginForm from \"./LoginForm\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { AuthLoginProps } from \"../../redux/types\";\n\nconst LoginReduxForm = reduxForm<AuthLoginProps, { captcha: string }>({\n  form: \"login\",\n})(LoginForm);\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n  captcha: string;\n};\n\ntype MapDispatchPropsType = {\n  login: (loginData: AuthLoginProps) => void;\n};\n\nfunction Login({\n  login,\n  isAuth,\n  captcha,\n}: MapStatePropsType & MapDispatchPropsType) {\n  function onSubmit(formData: AuthLoginProps) {\n    login(formData);\n  }\n\n  if (isAuth) {\n    return <Navigate to=\"/profile\" />;\n  }\n  return (\n    <>\n      <h1>Login</h1>\n      <LoginReduxForm captcha={captcha} onSubmit={onSubmit} />\n    </>\n  );\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  isAuth: state.auth.isAuth,\n  captcha: state.auth.captcha,\n});\n\nexport default connect<\n  MapStatePropsType,\n  MapDispatchPropsType,\n  {},\n  AppStateType\n>(mapStateToProps, { login: loginThunk })(Login);\n","import { WrappedFieldProps } from \"redux-form\";\nimport s from \"./FormControl.module.css\";\n\ntype InputTypes = \"textarea\" | \"text\" | \"email\" | \"password\" | \"checkbox\";\ntype PropsType = {\n  type: InputTypes;\n};\n\nexport function FormControl({\n  type = \"text\",\n  meta: { error, touched },\n  input,\n  ...restProps\n}: WrappedFieldProps & PropsType) {\n  const notValid = touched && error;\n  function getClasses() {\n    return `${s.formControl} ${notValid ? s.error : \"\"}`;\n  }\n  return (\n    <div className={getClasses()}>\n      {type === \"textarea\" && <textarea {...input} {...restProps} />}\n      {type === \"text\" && <input type=\"text\" {...input} {...restProps} />}\n      {type === \"email\" && <input type=\"email\" {...input} {...restProps} />}\n      {type === \"password\" && (\n        <input type=\"password\" {...input} {...restProps} />\n      )}\n      {type === \"checkbox\" && (\n        <input type=\"checkbox\" {...input} {...restProps} />\n      )}\n      {notValid && <span>{error}</span>}\n    </div>\n  );\n}\n","export type ValidatorType = (value: string) => string | undefined;\n\nexport const required: ValidatorType = (value) =>\n  value ? undefined : \"Required field\";\n\nexport const maxLength =\n  (max: number): ValidatorType =>\n  (value) =>\n    value && value.length > max\n      ? `Length must be less than ${max} symbols`\n      : undefined;\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__R9RWM\",\"error\":\"FormControl_error__CC5RU\",\"formError\":\"FormControl_formError__CyVj3\"};"],"names":["handleSubmit","error","captcha","onSubmit","Field","validate","required","name","type","component","FormControl","placeholder","className","s","src","alt","LoginReduxForm","reduxForm","form","LoginForm","connect","state","isAuth","auth","login","loginThunk","to","formData","meta","touched","input","restProps","notValid","value","undefined","maxLength","max","length"],"sourceRoot":""}