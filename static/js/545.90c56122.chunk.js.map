{"version":3,"file":"static/js/545.90c56122.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.tsx","webpack://react-01/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/StatusWithHooks.tsx","webpack://react-01/./src/components/Profile/ProfileInfo/ProfileEditForm.module.css?8dd2","components/Profile/ProfileInfo/ProfileEditForm.tsx","redux/profileSelector.ts","redux/authSelector.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-01/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/NewPost/NewPost.tsx","webpack://react-01/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.module.css","components/Profile/ProfilePage.tsx","components/common/FormControl/FormControl.tsx","components/utils/validate.ts","webpack://react-01/./src/components/common/FormControl/FormControl.module.css?004a"],"sourcesContent":["import { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { AppStateType } from \"../redux/redux-store\";\n\nfunction mapStateToProps(state: AppStateType) {\n  return { isAuth: state.auth.isAuth };\n}\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\n\nfunction withAuthRedirect<WCP extends MapStatePropsType>(Component: React.ComponentType<WCP>) {\n  function ContainerComponent(props: MapStatePropsType) {\n    const { isAuth, ...restProps } = props;\n    if (!isAuth) return <Navigate to=\"/login\" />;\n\n    return <Component {...(restProps as WCP)} />;\n  }\n\n  return connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToProps)(ContainerComponent);\n}\n\nexport default withAuthRedirect;\n","// extracted by mini-css-extract-plugin\nexport default {\"wallpaper\":\"ProfileInfo_wallpaper__+z-V6\",\"profile\":\"ProfileInfo_profile__XM2oU\",\"name\":\"ProfileInfo_name__nzLXx\",\"photo\":\"ProfileInfo_photo__xlmyX\",\"links\":\"ProfileInfo_links__mTIPu\",\"link\":\"ProfileInfo_link__RK8eP\",\"aboutMe\":\"ProfileInfo_aboutMe__l7xQO\",\"status\":\"ProfileInfo_status__YrBI5\",\"statusInput\":\"ProfileInfo_statusInput__XlSnR\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__rkocf\",\"editProfile\":\"ProfileInfo_editProfile__wBdE-\",\"editButtons\":\"ProfileInfo_editButtons__2gLxC\"};","import { FocusEvent, useEffect, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\n\ntype PropsType = {\n  status: string | null;\n  isOwner: boolean;\n  updateStatus: (value: string) => void;\n};\n\nfunction Status({ status, updateStatus, isOwner }: PropsType) {\n  const [editMode, setEditMode] = useState(false);\n  const [value, setValue] = useState(status ? status : \"\");\n\n  useEffect(() => {\n    setValue(status ? status : \"\");\n  }, [status]);\n\n  function toggleEditMode() {\n    if (!isOwner) return;\n\n    if (editMode && status !== value) {\n      updateStatus(value);\n    }\n    setEditMode(!editMode);\n  }\n\n  function onStatusInput({ currentTarget }: FocusEvent<HTMLInputElement>) {\n    setValue(currentTarget.value);\n  }\n\n  return (\n    <>\n      {!editMode && (\n        <p onDoubleClick={toggleEditMode} className={s.status}>\n          {status || (isOwner && \"(double click to edit your status)\")}\n        </p>\n      )}\n\n      {editMode && (\n        <input value={value} onInput={onStatusInput} onBlur={toggleEditMode} className={s.statusInput} autoFocus />\n      )}\n    </>\n  );\n}\n\nexport default Status;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ProfileEditForm_wrapper__g-1xj\",\"fieldsContainer\":\"ProfileEditForm_fieldsContainer__vA7hr\",\"lookingForContainer\":\"ProfileEditForm_lookingForContainer__GPeKr\",\"lookingForInput\":\"ProfileEditForm_lookingForInput__24kXi\",\"saveBtn\":\"ProfileEditForm_saveBtn__w6BTT\"};","import { useState } from \"react\";\nimport { Field, InjectedFormProps } from \"redux-form\";\nimport { FormControl } from \"../../common/FormControl/FormControl\";\nimport { required } from \"../../utils/validate\";\nimport formStyles from \"../../common/FormControl/FormControl.module.css\";\nimport s from \"./ProfileEditForm.module.css\";\nimport { ProfileType } from \"../../../redux/types\";\n\ntype PropsType = {\n  profile: ProfileType;\n};\n\nfunction ProfileEditForm({\n  handleSubmit,\n  profile,\n  error,\n}: InjectedFormProps<ProfileType, PropsType> & PropsType) {\n  const [lookingForAJob, setLookingForAJob] = useState(profile.lookingForAJob);\n\n  function setLinks() {\n    const entries = Object.entries(profile.contacts);\n    return entries.map((link) => {\n      return (\n        <Field\n          key={link[0]}\n          name={`contacts.${link[0]}`}\n          component={FormControl}\n          placeholder={link[0]}\n        ></Field>\n      );\n    });\n  }\n\n  return (\n    <form className={s.wrapper} onSubmit={handleSubmit}>\n      <div>\n        <div className={s.fieldsContainer}>\n          <span>Full name: </span>\n          <Field\n            validate={[required]}\n            name={\"fullName\"}\n            component={FormControl}\n            placeholder=\"enter your full name\"\n          />\n        </div>\n        <div>\n          <span>Links: </span>\n          {setLinks()}\n        </div>\n      </div>\n\n      <div>\n        <div className={s.fieldsContainer}>\n          <span>About me: </span>\n          <Field\n            name={\"aboutMe\"}\n            type=\"textarea\"\n            component={FormControl}\n            placeholder=\"tell something about yourself\"\n          />\n        </div>\n\n        <div className={s.fieldsContainer}>\n          <div className={s.lookingForContainer}>\n            <span>Looking for a job? </span>\n            <Field\n              className={s.lookingForInput}\n              onChange={() => {\n                setLookingForAJob(!lookingForAJob);\n              }}\n              name={\"lookingForAJob\"}\n              component={FormControl}\n              type=\"checkbox\"\n            />\n          </div>\n\n          {lookingForAJob && (\n            <>\n              <span>Which job are you looking for? </span>\n              <Field\n                name={\"lookingForAJobDescription\"}\n                type=\"textarea\"\n                component={FormControl}\n                placeholder=\"tell something about yourself\"\n              />\n            </>\n          )}\n          {error && <p className={formStyles.formError}>{error}</p>}\n        </div>\n        <button className={s.saveBtn}>Save</button>\n      </div>\n    </form>\n  );\n}\n\nexport default ProfileEditForm;\n","import { AppStateType } from \"./redux-store\";\n\nexport const getProfile = (state: AppStateType) => state.profilePage.currentProfile;\nexport const getStatus = (state: AppStateType) => state.profilePage.status;\nexport const getEditMode = (state: AppStateType) => state.profilePage.editMode;\n","import { AppStateType } from \"./redux-store\";\n\nexport const getMyId = (state: AppStateType) => state.auth.id;\n","import s from \"./ProfileInfo.module.css\";\nimport photoPlaceHolder from \"../../../assets/images/profilePicture.webp\";\nimport Status from \"./StatusWithHooks\";\nimport Loader from \"../../common/Loader\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { reduxForm } from \"redux-form\";\nimport { ProfileType } from \"../../../redux/types\";\nimport { ChangeEvent, useEffect } from \"react\";\nimport { useAppDispatch } from \"../../../redux/redux-store\";\nimport {\n  actions,\n  getStatusByIdThunk,\n  getUserByIdThunk,\n  updateProfileThunk,\n  updateStatusThunk,\n  uploadPhotoThunk,\n} from \"../../../redux/profileReducer\";\nimport { useSelector } from \"react-redux\";\nimport { getProfile, getStatus, getEditMode } from \"../../../redux/profileSelector\";\nimport { useParams } from \"react-router-dom\";\nimport { getMyId } from \"../../../redux/authSelector\";\n\ntype FormPropsType = {\n  profile: ProfileType;\n};\n\nconst ProfileReduxForm = reduxForm<ProfileType, FormPropsType>({\n  form: \"edit-profile\",\n})(ProfileEditForm);\n\nfunction ProfileInfo() {\n  const params = useParams();\n  const isOwner = !params.userId;\n  const profile = useSelector(getProfile);\n  const status = useSelector(getStatus);\n  const editMode = useSelector(getEditMode);\n  const myId = useSelector(getMyId);\n\n  // dispatch actions\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    let userId: number | null;\n    params.userId ? (userId = Number(params.userId)) : (userId = null);\n\n    if (!userId) {\n      userId = myId;\n      if (!userId) {\n        return;\n      }\n    }\n\n    dispatch<any>(getUserByIdThunk(userId));\n    dispatch<any>(getStatusByIdThunk(userId));\n  }, [dispatch, myId, params.userId]);\n\n  function handlePhotoChange(e: ChangeEvent<HTMLInputElement>) {\n    if (e.target.files?.length) {\n      dispatch<any>(uploadPhotoThunk(e.target.files[0]));\n    }\n  }\n  function handleEditProfileSubmit(formData: ProfileType) {\n    dispatch<any>(updateProfileThunk(formData));\n  }\n  function handleStatusChange(newStatus: string) {\n    dispatch<any>(updateStatusThunk(newStatus));\n  }\n  function toggleEditMode() {\n    dispatch(actions.setEditMode(!editMode));\n  }\n\n  // visuals\n  function setPhoto() {\n    if (!profile?.photos) return;\n    return `${profile.photos.large === null ? photoPlaceHolder : profile.photos.large}`;\n  }\n  function setLinks() {\n    if (!profile) return;\n    const entries = Object.entries(profile.contacts);\n    return entries.map((link) => {\n      if (link[1]) {\n        return (\n          <li key={link[0]}>\n            <a target=\"_blank\" className={s.link} href={link[1]} rel=\"noreferrer\">\n              {link[0]}\n            </a>\n          </li>\n        );\n      }\n      return undefined;\n    });\n  }\n  function setLookingForJob() {\n    if (!profile) return;\n    if (profile.lookingForAJob) {\n      return (\n        <>\n          <h3>Looking for a job: </h3>\n          <p>{profile.lookingForAJobDescription}</p>\n        </>\n      );\n    }\n  }\n\n  if (!profile) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <div className={s.profile}>\n        <div>\n          <img className={s.photo} src={setPhoto()} alt=\"Profile\" />\n          <div className={s.editButtons}>\n            {isOwner && (\n              <>\n                <label className={s.uploadPhoto}>\n                  Upload new photo\n                  <input type=\"file\" onChange={handlePhotoChange} />\n                </label>\n                {!editMode && (\n                  <button className={s.editProfile} onClick={toggleEditMode}>\n                    Edit Profile\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n        {editMode ? (\n          <ProfileReduxForm initialValues={profile} profile={profile} onSubmit={handleEditProfileSubmit} />\n        ) : (\n          <div>\n            <h2 className={s.name}>{profile.fullName}</h2>\n            <Status isOwner={isOwner} updateStatus={handleStatusChange} status={status} />\n            <ul className={s.links}>{setLinks()}</ul>\n            <p className={s.aboutMe}>{profile.aboutMe}</p>\n            {setLookingForJob()}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MyPosts_list__3Nw2i\",\"wrapper\":\"MyPosts_wrapper__u1ISI\"};","import React from \"react\";\nimport { Field, InjectedFormProps } from \"redux-form\";\nimport { FormControl } from \"../../../common/FormControl/FormControl\";\nimport { maxLength, required } from \"../../../utils/validate\";\n\nconst maxLength50 = maxLength(50);\n\nfunction NewPost({ handleSubmit }: InjectedFormProps<{ newPost: string }>) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        component={FormControl}\n        type=\"textarea\"\n        name=\"newPost\"\n        validate={[maxLength50, required]}\n        placeholder=\"Create new post.\"\n      />\n      <button>Add Post</button>\n    </form>\n  );\n}\n\nexport default NewPost;\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"avatar\":\"Post_avatar__J150j\",\"text\":\"Post_text__Js3ZD\",\"content\":\"Post_content__DFcK4\",\"likes\":\"Post_likes__K9KVP\"};","import s from \"./Post.module.css\";\n\ntype PropsType = {\n  message: string;\n  likesCount: number;\n};\n\nfunction Post({ message, likesCount }: PropsType) {\n  return (\n    <li className={s.post}>\n      <img\n        className={s.avatar}\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQxCgYOgHmN5jdz_T0RLYI9BUhR6nYs2fK8NA&usqp=CAU\"\n        alt=\"Profile\"\n      />\n      <div className={s.content}>\n        <p className={s.text}>{message}</p>\n        <p className={s.likes}>{likesCount} likes</p>\n      </div>\n    </li>\n  );\n}\n\nexport default Post;\n","import { reduxForm } from \"redux-form\";\nimport s from \"./MyPosts.module.css\";\nimport NewPost from \"./NewPost/NewPost\";\nimport Post from \"./Post/Post\";\nimport { PostType } from \"../../../redux/types\";\n\nconst NewPostForm = reduxForm<{ newPost: string }>({\n  form: \"newPost\",\n})(NewPost);\n\ntype PropsType = {\n  posts: Array<PostType>;\n  addPost: (newPost: string) => void;\n};\n\nconst MyPosts = ({ posts, addPost }: PropsType) => {\n  function onPostSubmit({ newPost }: { newPost: string }) {\n    addPost(newPost);\n  }\n\n  return (\n    <div className={s.wrapper}>\n      <h2>my posts</h2>\n\n      <NewPostForm onSubmit={onPostSubmit} />\n\n      <ul className={s.list}>\n        {posts.map(({ text, likesCount, id }) => (\n          <Post key={id} message={text} likesCount={likesCount} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MyPosts;\n","import MyPosts from \"./MyPosts\";\nimport { actions } from \"../../../redux/profileReducer\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../../redux/redux-store\";\nimport { PostType } from \"../../../redux/types\";\n\ntype MapStatePropsType = {\n  posts: Array<PostType>;\n};\ntype MapDispatchPropsType = {\n  addPost: (newPostText: string) => void;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    posts: state.profilePage.posts,\n  };\n};\n\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n  addPost: actions.addPost,\n})(MyPosts);\n\nexport default MyPostsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {};","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport s from \"./Profile.module.css\";\nimport { compose } from \"redux\";\nimport withAuthRedirect from \"../../HOC/withAuthRedirect\";\n\nfunction ProfilePage() {\n  return (\n    <>\n      <div className={s.wrapper}>\n        <ProfileInfo />\n        <MyPostsContainer />\n      </div>\n    </>\n  );\n}\n\nexport default compose<React.ComponentType>(withAuthRedirect)(ProfilePage);\n","import { WrappedFieldProps } from \"redux-form\";\nimport s from \"./FormControl.module.css\";\n\ntype InputTypes = \"textarea\" | \"text\" | \"email\" | \"password\" | \"checkbox\";\ntype PropsType = {\n  type: InputTypes;\n};\n\nexport function FormControl({\n  type = \"text\",\n  meta: { error, touched },\n  input,\n  ...restProps\n}: WrappedFieldProps & PropsType) {\n  const notValid = touched && error;\n  function getClasses() {\n    return `${s.formControl} ${notValid ? s.error : \"\"}`;\n  }\n  return (\n    <div className={getClasses()}>\n      {type === \"textarea\" && <textarea {...input} {...restProps} />}\n      {type === \"text\" && <input type=\"text\" {...input} {...restProps} />}\n      {type === \"email\" && <input type=\"email\" {...input} {...restProps} />}\n      {type === \"password\" && (\n        <input type=\"password\" {...input} {...restProps} />\n      )}\n      {type === \"checkbox\" && (\n        <input type=\"checkbox\" {...input} {...restProps} />\n      )}\n      {notValid && <span>{error}</span>}\n    </div>\n  );\n}\n","export type ValidatorType = (value: string) => string | undefined;\n\nexport const required: ValidatorType = (value) =>\n  value ? undefined : \"Required field\";\n\nexport const maxLength =\n  (max: number): ValidatorType =>\n  (value) =>\n    value && value.length > max\n      ? `Length must be less than ${max} symbols`\n      : undefined;\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__R9RWM\",\"error\":\"FormControl_error__CC5RU\",\"formError\":\"FormControl_formError__CyVj3\"};"],"names":["mapStateToProps","state","isAuth","auth","Component","connect","props","restProps","to","status","updateStatus","isOwner","useState","editMode","setEditMode","value","setValue","toggleEditMode","useEffect","onDoubleClick","className","s","onInput","currentTarget","onBlur","autoFocus","handleSubmit","profile","error","lookingForAJob","setLookingForAJob","onSubmit","Field","validate","required","name","component","FormControl","placeholder","Object","entries","contacts","map","link","type","onChange","formStyles","getProfile","profilePage","currentProfile","getStatus","getEditMode","getMyId","id","ProfileReduxForm","reduxForm","form","ProfileEditForm","params","useParams","userId","useSelector","myId","dispatch","useAppDispatch","Number","getUserByIdThunk","getStatusByIdThunk","src","photos","large","photoPlaceHolder","setPhoto","alt","e","target","files","length","uploadPhotoThunk","onClick","actions","initialValues","formData","updateProfileThunk","fullName","newStatus","updateStatusThunk","href","rel","setLinks","aboutMe","lookingForAJobDescription","setLookingForJob","Loader","maxLength50","maxLength","message","likesCount","NewPostForm","NewPost","posts","addPost","newPost","text","MyPosts","compose","withAuthRedirect","meta","touched","input","notValid","undefined","max"],"sourceRoot":""}